import rebound
import numpy as np
import pandas as pd
import scripts.task_utils as task_utils

#Angle of inclination, as included in rebound, calculataed as the angle between orbital plane and xy-reference plane measured from the positive x-axis
#Angle are in radians
#Assumes that inclination is constant throughout

class Scenario:
    def __init__(self, scenario_creator, skip_simulation=False):
        self.scenario_creator = scenario_creator

        prompt = """Determine the angle of inclination of system's orbit."""
        final_answer_units = "rad"

        self.binary_sim = self.scenario_creator.create_binary(prompt, final_answer_units, skip_simulation=skip_simulation)

    def true_answer(self, N_obs=None, verification=False, return_empirical=False) -> float:
        """
        Return the true answer for the environment.
        
        Args:
            N_obs: Number of observations to use (if None, use all)
            verification: Whether to verify values match
            return_empirical: If True, return the empirically derived value;
                              if False, return the value inputted into the simulation or using Rebound simulated details typically hidden
        """
        # Load the simulation data
        df = pd.read_csv(f"scenarios/detailed_sims/{self.binary_sim.filename}.csv")
        
        if N_obs is not None:
            indices = np.linspace(0, len(df) - 1, N_obs)
            df = df.iloc[indices].reset_index(drop=True)

        # Return the angle of inclination
        df['empirical_inc'] = np.arctan2(df['star1_z'] - df['star2_z'], df['star1_x'] - df['star2_x'])

        #Ensures radian is positive, measured from the positive x-axis
        df['empirical_inc'] = df['empirical_inc'] % (2 * np.pi)
        mean_empirical_inc = df['empirical_inc'].mean()
        
        # verification
        inc_rebound = df['inc'].iloc[0]
        if verification:
            assert abs(mean_empirical_inc - inc_rebound) < 0.01 * inc_rebound, f"{mean_empirical_inc} and {inc_rebound} are not within 1% of each other"
        
        if return_empirical:
            return mean_empirical_inc  # Return the calculated inclination if empirical value is requested
        else:
            return inc_rebound  # Return the rebound calculated inclination if not requesting empirical value

 
